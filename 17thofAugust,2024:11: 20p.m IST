Very easy problem but we have to handle the zeroes carefully ..that is the point only.


// User function template for C++

class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) 
    {
         int n = nums.size();
    vector<long long int> answer(n, 0);
    
    long long int productWithoutZero = 1;
    int zeroCount = 0;

    // Calculate the product of all non-zero elements and count zeros
    for (int i = 0; i < n; i++) {
        if (nums[i] != 0) {
            productWithoutZero *= nums[i];
        } else {
            zeroCount++;
        }
    }

    // Handle different cases based on the number of zeros
    for (int i = 0; i < n; i++) {
        if (zeroCount > 1) {
            answer[i] = 0;
        } else if (zeroCount == 1) {
            if (nums[i] == 0) {
                answer[i] = productWithoutZero;
            } else {
                answer[i] = 0;
            }
        } else {
            answer[i] = productWithoutZero / nums[i];
        }
    }

    return answer;
    }
};
